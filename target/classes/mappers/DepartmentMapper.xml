<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	author : 임형진
	fileName : 통합구현 이수자평가.pdf
	content : Department 테이블에 대한 매퍼
	lastUpdate : 2019-01-25

-->
	
<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Department 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="DepartmentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap type="study.spring.hellospring.model.Department" id="department">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="deptno" column="deptno"/>
		<result property="dname" column="dname"/>  
		<result property="loc" column="loc"/>     
		<!-- select문에 별칭을 적용할 경우 column에 별칭을 명시해야 한다. -->
	</resultMap>
	<!-- 
		다중행 조회(목록조회)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터로 전달될 객체의 클래스 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	
	<select id="selectDepartmentAddList"
			parameterType="study.spring.hellospring.model.Department"
			resultMap="department">
			<!-- 이 안에서 처리할 SQL문을 명시한다. -->
			SELECT deptno, dname, loc FROM department			
			
			
	</select>
	
	
	<select id="selectDepartmentList"
			parameterType="study.spring.hellospring.model.Department"
			resultMap="department">
			<!-- 이 안에서 처리할 SQL문을 명시한다. -->
			SELECT deptno, dname, loc FROM department
			
			
			<where>
			<if test="dname != null and dname != '' ">
				dname LIKE concat('%', #{dname}, '%')
			</if>
			</where>
			ORDER BY deptno DESC
			<if test="limitStart != null"> 
			LIMIT #{limitStart}, #{listCount}
			</if>
	</select>
	
	<!-- 
		단일행 조회(상세보기)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터의 데이터 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	<select id="selectDepartmentItem"
			parameterType="study.spring.hellospring.model.Department"
			resultMap="department">
			<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의
				멤버변수값이 치환된다. -->
			SELECT deptno, dname, loc FROM department WHERE deptno=#{deptno}
	</select>
	<!-- 
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입"
			useGeneratedKeys="자동증가 일련번호값 리턴 여부"
			keyProperty="자동증가 일련번호 컬럼명">	
	 -->
	
	<insert id="insertDepartmentItem" parameterType="study.spring.hellospring.model.Department"
	useGeneratedKeys="true" keyProperty="deptno">
	
	<!-- "#{변수명}"으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다.  -->
	INSERT INTO department (dname, loc) VALUES (#{dname}, #{loc});
	</insert>
	
	<!-- 데이터 갱신을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <update id="updateDepartmentItem" parameterType="study.spring.hellospring.model.Department">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	UPDATE department SET deptno=#{deptno}, dname=#{dname}, loc=#{loc}
	 	WHERE deptno=#{deptno};
	 </update>
	 
	 
	 <!-- 데이터 삭제를 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <delete id="deleteDepartmentItem" parameterType="study.spring.hellospring.model.Department">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	DELETE FROM department WHERE deptno=#{deptno};
	 </delete>
	 
	 
	
	<!-- 집계 함수는 리턴값이 빈즈의 멤버변수 형태가 아니라 정수 형태이므로 int형을 명시해야 한다. -->
	<select id="selectDepartmentCount" parameterType="study.spring.hellospring.model.Department"
	resultType="int">
		SELECT
			count(deptno)
		FROM department
		
		<where>
			<if test="dname != null and dname != ''">
				dname LIKE concat('%', #{dname}, '%')
			</if>
		</where>	
	</select>
</mapper>