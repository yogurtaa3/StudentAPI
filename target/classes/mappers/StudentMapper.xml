<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	author : 임형진
	fileName : 통합구현 이수자평가.pdf
	content : Student 테이블에 대한 매퍼
	lastUpdate : 2019-01-25

-->
	
<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Student 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="StudentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap type="study.spring.hellospring.model.Student" id="student">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="studno" column="studno"/>      
		<result property="name" column="name"/>          
		<result property="userid" column="userid"/>      
		<result property="grade" column="grade"/>        
		<result property="idnum" column="idnum"/>        
		<result property="birthdate" column="birthdate"/>
		<result property="tel" column="tel"/>            
		<result property="height" column="height"/>      
		<result property="weight" column="weight"/>      
		<result property="deptno" column="deptno"/>      
		<result property="profno" column="profno"/>
		<result property="dname" column="dname"/>
		<result property="pname" column="pname"/>            
		<!-- select문에 별칭을 적용할 경우 column에 별칭을 명시해야 한다. -->
	</resultMap>
	<!-- 
		다중행 조회(목록조회)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터로 전달될 객체의 클래스 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	
	<select id="selectStudentList"
			parameterType="study.spring.hellospring.model.Student"
			resultMap="student">
			<!-- 이 안에서 처리할 SQL문을 명시한다. -->
			SELECT studno, s.name, s.userid, grade, idnum, 
			Date_format(birthdate, '%Y-%m-%d') AS birthdate, tel, height, 
			weight, s.deptno, dname, p.name as pname, s.profno
			FROM student s
			LEFT OUTER JOIN professor p
			ON s.profno=p.profno
			INNER JOIN department d
			ON s.deptno=d.deptno
			
			<where>
			<if test="name != null and name != '' ">
				s.name LIKE concat('%', #{name}, '%')
			</if>
			
			</where>
			ORDER BY studno ASC
			<if test="limitStart != null">
				LIMIT #{limitStart}, #{listCount}
			</if>
			
	</select>
	
	<!-- 
		단일행 조회(상세보기)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터의 데이터 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	<select id="selectStudentItem"
			parameterType="study.spring.hellospring.model.Student"
			resultMap="student">
			<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의
				멤버변수값이 치환된다. -->
			SELECT studno, s.name, s.userid, grade, idnum, 
			Date_format(birthdate, '%Y-%m-%d') AS birthdate, tel, height, 
			weight, s.deptno, dname, p.name as pname, s.profno			
			FROM student s
			LEFT OUTER JOIN department d
			ON s.deptno=d.deptno
			INNER JOIN professor p
			ON s.profno=p.profno
			
			
			WHERE studno=#{studno}
	</select>
	
	<!-- 집계 함수는 리턴값이 빈즈의 멤버변수 형태가 아니라 정수 형태이므로 int형을 명시해야 한다. -->
	<select id="selectStudentCount" parameterType="study.spring.hellospring.model.Student"
	resultType="int">
		SELECT
			count(studno)
		FROM student
		
		<where>
			<if test="name != null and name != ''">
				name LIKE concat('%', #{name}, '%')
			</if>
		</where>	
	</select>
	<!-- 
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입"
			useGeneratedKeys="자동증가 일련번호값 리턴 여부"
			keyProperty="자동증가 일련번호 컬럼명">	
	 -->
	
	<insert id="insertStudentItem" parameterType="study.spring.hellospring.model.Student"
	useGeneratedKeys="true" keyProperty="studno">
	
		<!-- "#{변수명}"으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다.  -->
		INSERT INTO student (name, userid, grade, idnum, birthdate, tel, height, weight, deptno
			<if test="profno != 0">
				, profno
			</if>
		) VALUES (#{name}, #{userid}, #{grade}, #{idnum}, 
		#{birthdate}, #{tel}, #{height}, #{weight}, #{deptno} 
		
		
			<if test="profno != 0">
				, #{profno}
			</if>
			
		
		
		);
	</insert>
	
	<!-- 데이터 갱신을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <update id="updateStudentItem" parameterType="study.spring.hellospring.model.Student">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	UPDATE student SET 
		 	name=#{name}, userid=#{userid}, grade=#{grade}, 
		 	idnum=#{idnum}, birthdate=#{birthdate}, tel=#{tel}, height=#{height}, 
		 	weight=#{weight}, deptno=#{deptno}
		 	<choose>
		 		<when test="profno != 0">
		 			, profno=#{profno}
		 		</when>
		 		<otherwise>
		 			, profno=null
		 		</otherwise>
		 	</choose>
		 	
	 	WHERE studno=#{studno}
	 </update>
	 
	 
	 <!-- 데이터 삭제를 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <delete id="deleteStudentItem" parameterType="study.spring.hellospring.model.Student">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	DELETE FROM student WHERE studno=#{studno};
	 </delete>
	 
	 <delete id="deleteStudentByDeptno">
	 	<!-- 학과 삭제 서비스를 위한 기능 -->
	 	DELETE FROM student WHERE deptno=#{deptno};
	 </delete>
	 
	 <delete id="deleteStudentByProfno">
	 	<!-- 학과 삭제 서비스를 위한 기능 -->
	 	DELETE FROM student WHERE profno=#{profno};
	 </delete>
</mapper>