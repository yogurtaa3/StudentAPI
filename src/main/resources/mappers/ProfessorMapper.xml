<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	author : 임형진
	fileName : 통합구현 이수자평가.pdf
	content : Professor 테이블에 대한 매퍼
	lastUpdate : 2019-01-25

-->
	
<!-- 이 파일의 경로를 config.xml에 명시해야 한다. -->

<!-- Professor 테이블에 대한 CRUD 기능을 구현하기 위한 Mapper -->
<mapper namespace="ProfessorMapper">


	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap type="study.spring.hellospring.model.Professor" id="professor">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="profno"	column="profno" />
		<result property="name"	column="name" />
		<result property="userid"	column="userid" />
		<result property="position"	column="position" />
		<result property="sal"	column="sal" />
		<result property="hiredate"	column="hiredate" />
		<result property="comm"	column="comm" />
		<result property="deptno"	column="deptno" />
		<!-- select문에 별칭을 적용할 경우 column에 별칭을 명시해야 한다. -->
	</resultMap>
	<!-- 
		다중행 조회(목록조회)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터로 전달될 객체의 클래스 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	
	<select id="selectProfessorList"
			parameterType="study.spring.hellospring.model.Professor"
			resultMap="professor">
			<!-- 이 안에서 처리할 SQL문을 명시한다. -->
			SELECT
				profno, name, userid, position, sal,
				Date_format(hiredate, '%Y-%m-%d') AS hiredate,
				comm, deptno
			FROM professor
			Order by profno ASC
	</select>
	
	<!-- 
		단일행 조회(상세보기)를 위한 기능 정의
		<select id="메서드이름"
			parameterType="파라미터의 데이터 타입"
			resultMap="리턴될 Beans의 id">	
	 -->
	<select id="selectProfessorItem"
			parameterType="study.spring.hellospring.model.Professor"
			resultMap="professor">
			<!-- "#{변수명}" 으로 표시된 곳에 파라미터로 전달된 Beans의
				멤버변수값이 치환된다. -->
			SELECT
				profno, name, userid, position, sal,
				Date_format(hiredate, '%Y-%m-%d') AS hiredate,
				comm, deptno
			FROM professor
			WHERE profno=#{profno}
	</select>
	<!-- 
		데이터 저장을 위한 기능 정의
		<insert id="메서드이름" parameterType="파라미터의 데이터 타입"
			useGeneratedKeys="자동증가 일련번호값 리턴 여부"
			keyProperty="자동증가 일련번호 컬럼명">	
	 -->
	
	<insert id="insertProfessorItem" parameterType="study.spring.hellospring.model.Professor"
	useGeneratedKeys="true" keyProperty="profno">
	
		<!-- "#{변수면}"으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다.  -->
		INSERT INTO professor (
			name, userid, position, sal, hiredate, comm, deptno
		) VALUES (
			#{name}, #{userid}, #{position}, #{sal}, #{hiredate}, #{comm}, #{deptno}
		)
	</insert>
	
	<!-- 데이터 갱신을 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <update id="updateProfessorItem" parameterType="study.spring.hellospring.model.Professor">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	UPDATE professor SET
	 		name=#{name}, userid=#{userid}, position=#{position}, sal=#{sal}, hiredate=#{hiredate}, comm=#{comm}, deptno=#{deptno}
	 	WHERE profno=#{profno}
	 </update>
	 
	 
	 <!-- 데이터 삭제를 위한 기능 정의
		<update id="메서드이름" parameterType="파라미터의 데이터 타입"
	 -->
	 <delete id="deleteProfessorItem" parameterType="study.spring.hellospring.model.Professor">
	 	<!-- '#{변수명}' 으로 표시된 곳에 파라미터로 전달된 Beans의 멤버변수값이 치환된다. -->
	 	DELETE from professor WHERE profno=#{profno}
	 </delete>
	 
	 <delete id="deleteProfessorByDeptno">
	 	<!-- 학과 삭제 서비스를 위한 기능 -->
	 	DELETE FROM professor WHERE deptno=#{deptno};
	 </delete>
</mapper>